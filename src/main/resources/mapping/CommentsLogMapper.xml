<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gotway.gotway.mapper.CommentsLogMapper">
  <resultMap id="BaseResultMap" type="com.gotway.gotway.pojo.CommentsLog">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="stick_id" jdbcType="INTEGER" property="stickId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="comments" jdbcType="VARCHAR" property="comments" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="object_id" jdbcType="INTEGER" property="objectId" />
    <result column="object_type" jdbcType="INTEGER" property="objectType" />
  </resultMap>
  <resultMap id="Base2ResultMap" type="com.gotway.gotway.pojo.vo.CommentsLogVo" extends="BaseResultMap">
    <result column="commenterName" jdbcType="VARCHAR" property="commenterName" />
    <result column="commenterHeadImg" jdbcType="VARCHAR" property="commenterHeadImg" />
    <result column="commenterEmail" jdbcType="VARCHAR" property="commenterEmail" />
    <result column="commenterId"  jdbcType="INTEGER" property="commenterId" />
    <result column="stickerId"  jdbcType="INTEGER" property="stickerId" />
    <result column="stickerName" jdbcType="VARCHAR" property="stickerName" />
    <result column="stickerHeadImg" jdbcType="VARCHAR" property="stickerHeadImg" />
    <result column="stickerEmail" jdbcType="VARCHAR" property="stickerEmail" />
  </resultMap>
  <resultMap id="VoResultMap" type="com.gotway.gotway.pojo.vo.CommentsLogVo" extends="Base2ResultMap">
    <collection property="replies" column="id"  select="selectReplies"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, stick_id, user_id, create_time, comments, state, object_id, object_type
  </sql>
  <select id="selectByExample" parameterType="com.gotway.gotway.pojo.CommentsLogExample" resultMap="VoResultMap">
    select t.* ,t1.nickname commenterName,t1.id commenterId,t1.head_img commenterHeadImg,
    t3.id stickerId,t3.nickname stickerName,t3.head_img stickerHeadImg
    from (
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_comments_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    ) t
    left join t_user t1 on t1.id=t.user_id
    left join t_stick t2 on t2.id=t.stick_id
    left join t_user t3 on t3.id=t2.user_id
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="VoResultMap">
    select t.* ,t1.nickname commenterName,t1.id commenterId,t3.id stickerId,t3.nickname stickerName,t4.id replyToId ,t4.nickname replyToName
    from (
    select 
    <include refid="Base_Column_List" />
    from t_comments_log
    where id = #{id,jdbcType=INTEGER}
    ) t
    left join t_user t1 on t1.id=t.user_id
    left join t_stick t2 on t2.id=t.stick_id
    left join t_user t3 on t3.id=t2.user_id
    left join t_user t4 on t4.id = t.object_id
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_comments_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.gotway.gotway.pojo.CommentsLogExample">
    delete from t_comments_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.gotway.gotway.pojo.CommentsLog">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_comments_log (stick_id, user_id, create_time, 
      comments, state, object_id, 
      object_type)
    values (#{stickId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{comments,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}, #{objectId,jdbcType=INTEGER}, 
      #{objectType,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.gotway.gotway.pojo.CommentsLog">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_comments_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="stickId != null">
        stick_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="comments != null">
        comments,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="objectId != null">
        object_id,
      </if>
      <if test="objectType != null">
        object_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="stickId != null">
        #{stickId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="comments != null">
        #{comments,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="objectId != null">
        #{objectId,jdbcType=INTEGER},
      </if>
      <if test="objectType != null">
        #{objectType,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.gotway.gotway.pojo.CommentsLogExample" resultType="java.lang.Long">
    select count(*) from t_comments_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_comments_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.stickId != null">
        stick_id = #{record.stickId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.comments != null">
        comments = #{record.comments,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.objectId != null">
        object_id = #{record.objectId,jdbcType=INTEGER},
      </if>
      <if test="record.objectType != null">
        object_type = #{record.objectType,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_comments_log
    set id = #{record.id,jdbcType=INTEGER},
      stick_id = #{record.stickId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      comments = #{record.comments,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=INTEGER},
      object_id = #{record.objectId,jdbcType=INTEGER},
      object_type = #{record.objectType,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.gotway.gotway.pojo.CommentsLog">
    update t_comments_log
    <set>
      <if test="stickId != null">
        stick_id = #{stickId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="comments != null">
        comments = #{comments,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="objectId != null">
        object_id = #{objectId,jdbcType=INTEGER},
      </if>
      <if test="objectType != null">
        object_type = #{objectType,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.gotway.gotway.pojo.CommentsLog">
    update t_comments_log
    set stick_id = #{stickId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      comments = #{comments,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      object_id = #{objectId,jdbcType=INTEGER},
      object_type = #{objectType,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectForStick"  parameterType="int" resultMap="VoResultMap">
    select t.* ,t1.nickname commenterName,t1.id commenterId,t1.head_img commenterHeadImg,t1.email commenterEmail,
    t3.id stickerId,t3.nickname stickerName,t3.head_img stickerHeadImg,t3.email stickerEmail
    from (
    select
    <include refid="Base_Column_List" />
    from t_comments_log
      where stick_id=#{value} and object_type=-1
    ) t
    left join t_user t1 on t1.id=t.user_id
    left join t_stick t2 on t2.id=t.stick_id
    left join t_user t3 on t3.id=t2.user_id
    order by t.create_time asc

  </select>
  <select id="selectReplies" resultMap="Base2ResultMap" parameterType="int">
    select t.* ,t1.nickname commenterName,t1.id commenterId,t1.head_img commenterHeadImg,t1.email commenterEmail,
    t3.id stickerId,t3.nickname stickerName,t3.head_img stickerHeadImg,t3.email stickerEmail
    from (
    select * from t_comments_log  where object_type=#{value}
    ) t
    left join t_user t1 on t1.id=t.user_id
    left join t_comments_log t2 on t2.id=t.object_id
    left join t_user t3 on t3.id=t2.user_id
    order by t.create_time asc
  </select>
</mapper>